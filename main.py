import logging
import asyncio
import yt_dlp
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command
from spotipy import Spotify
from spotipy.oauth2 import SpotifyClientCredentials
import ffmpeg
import subprocess
import os
import subprocess

# –û–±–Ω–æ–≤–ª—è–µ–º yt-dlp –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
subprocess.run(["pip", "install", "--upgrade", "yt-dlp"])
    # --------------------------
    # –ß–∞—Å—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å YouTube —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º cookies —á–µ—Ä–µ–∑ subprocess
    # --------------------------
video_url = "https://www.youtube.com/watch?v=AykAUJYvW_c"
cookies_file = "cookies.txt"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª cookies.txt –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ Render –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ

command = ["yt-dlp", "--cookies", cookies_file, video_url]

result = subprocess.run(command, capture_output=True, text=True)
if result.returncode != 0:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏:", result.stderr)
else:
        print("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ!")

    # --------------------------
    # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –±–æ—Ç–∞
    # --------------------------

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
TOKEN = "7801480937:AAGYlIyrIITlg00Be2DrIUabUJ_gl11DVNI"

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Spotify API
SPOTIPY_CLIENT_ID = "d31233cbd1604ab8a30e1e6b6bffb17a"
SPOTIPY_CLIENT_SECRET = "2547ed9b43584e658220f9561640d7fe"
SPOTIPY_REDIRECT_URI = "https://replit.com/@hhhhshsbb/MuzikaForGodbot"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spotify API
client_credentials_manager = SpotifyClientCredentials(
        client_id=SPOTIPY_CLIENT_ID, 
        client_secret=SPOTIPY_CLIENT_SECRET
    )
sp = Spotify(client_credentials_manager=client_credentials_manager)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
start_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É")]],
        resize_keyboard=True
    )

    # –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
        await message.answer(
            "üé∂ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!",
            reply_markup=start_keyboard
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∏—Å–∫–∞
@dp.message(lambda message: message.text not in ["üîç –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É", "/start"])
async def search_music(message: types.Message):
        query = message.text

        # –ò—â–µ–º –º—É–∑—ã–∫—É —á–µ—Ä–µ–∑ Spotify API
        results = sp.search(q=query, limit=1, type='track')

        if not results['tracks']['items']:
            await message.answer("‚ùå –ú—É–∑—ã–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            return

        track = results['tracks']['items'][0]
        track_name = track['name']
        artist_name = track['artists'][0]['name']
        track_url = track['external_urls']['spotify']
        popularity = track['popularity']
        album_name = track['album']['name']
        release_date = track['album']['release_date']

        response_text = (
            f"üéµ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {track_name}\n"
            f"üé§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {artist_name}\n"
            f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞:</b> {release_date}\n"
            f"üíø <b>–ê–ª—å–±–æ–º:</b> {album_name}\n"
            f"üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:</b> {popularity}/100\n"
        )
        await message.answer(response_text, parse_mode="HTML")

        # –°–∫–∞—á–∏–≤–∞–µ–º –º—É–∑—ã–∫—É —Å YouTube
        await download_and_send_music(message, f"{artist_name} {track_name}")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—É–∑—ã–∫–∏
async def download_and_send_music(message: types.Message, query: str):
        ydl_opts = {
            'format': 'bestaudio/best',
            'extract_audio': True,
            'audio_format': 'mp3',  # –Ø–≤–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ mp3
            'quiet': True,
            'outtmpl': 'downloads/%(title)s.%(ext)s',
            'force-ipv4': True,
            'cookiefile': './cookies.txt',
            'nocheckcertificate': True,  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        }

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        download_folder = 'downloads'
        if not os.path.exists(download_folder):
            os.makedirs(download_folder)

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ –∑–∞–ø—Ä–æ—Å—É
                info = ydl.extract_info(f"ytsearch:{query}", download=True)
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ
                if 'entries' in info:
                    info = info['entries'][0]

                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–∫–∞—á–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                downloaded_file = ydl.prepare_filename(info)
                logging.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω: {downloaded_file}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
                if not os.path.exists(downloaded_file):
                    raise FileNotFoundError(f"–§–∞–π–ª {downloaded_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç OGG (–∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg)
                input_filename = downloaded_file
                ogg_filename = "music.ogg"

                # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if os.path.exists(ogg_filename):
                    os.remove(ogg_filename)

                ffmpeg.input(input_filename).output(
                    ogg_filename, format='opus', acodec='libopus', audio_bitrate='64k'
                ).run()

                logging.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ OGG: {ogg_filename}")

                if not os.path.exists(ogg_filename):
                    raise FileNotFoundError(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {ogg_filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                await bot.send_voice(message.chat.id, FSInputFile(ogg_filename))

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.remove(downloaded_file)
                os.remove(ogg_filename)

            except Exception as e:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")

    # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
        await dp.start_polling(bot)

if __name__ == "__main__":
        asyncio.run(main())
